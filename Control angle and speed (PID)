/******************************************
MOTOR CONTROLLING WITH ENCODER FEEDBACK
******************************************/

#include <EEPROM.h>
#include <PID_v1.h>

/*MECHANICAL DESIGN*/
float shaft_d = 0.15;								// shaft connecting to the motor shaft, DC motor speed_max:3000rpm, torque_max:54.6nm

/*ARDUINO PINS*/
int MotorControl_R = 7;							// digital output - clockwise
int MotorControl_L = 8;							// digital output - counter-clockwise
int MotorControl_pwm = 3;						// pwm enable - pwm signal - analog
int pin_A = 12;									// encoder input channel A
int pin_B = 13;									// encoder input channel B

 /*Input Values of Encoder*/
int channel_A;
int channel_B;
int encoderResolution = 100;					// resolution:100ppr->speed_max:15000rpm

/********************************************************
MotorPosition : Angle between platform and the ground 
				   -90 degree - 0 degree - 90 degree
LinearSpeed : 
*********************************************************/

/*Input values*/
float MotorPositionINPUT;							// INPUT FROM GAME angle [-90,90] in degree
float LinearSpeedINPUT;							// INPUT FROM GAME speed [0,700] in mm/s

int MotorDirectionINPUT;						// 0:BREAK 1:CLOCKWISE -1:COUNTER-CLOCKWISE
int PreMotorPosition = 0;
int pwmINPUT;									// calculation -> pwm
int PrepwmINPUT = 0;								

/*Feedback Values of Encoder Feedback*/
int pwmFB;
int MotorDirectionFB = 0;							// 0:BREAK 1:CLOCKWISE -1:COUNTER-CLOCKWISE
int MotorPositionFB = 0;							// Feedback postion in degrees by counting Channel A Signal

int PosDeadZone = 0;								// +/- of this value will not move the motor

/*PID Parameters & */
double Kp = 0, Ki = 10, Kd = 0;
double K = 1.0;
double integrated_error;
float last_error;
int pwmmaximum = 255;
unsigned char encoder_A_prev = 0;

/*Output Values*/
int pwmOUTPUT;
int MotorDirectionOUTPUT;
int PreMotorDirection = 0;


void setup() {

	pinMode(MotorControl_R, OUTPUT);
	pinMode(MotorControl_L, OUTPUT);
	pinMode(MotorControl_pwm, OUTPUT);

	pinMode(pin_A, INPUT);
	pinMode(pin_B, INPUT);

	Serial.begin(9600);

}
/***********************************************
				INPUT PROCESSING
MotorPositionINPUT		->		MotorDirectionINPUT
LinearSpeedINPUT		->		pwmINPUT
************************************************/
void calDirection()               // 0:BREAK 1:CLOCKWISE -1:COUNTER-CLOCKWISE
{
	//if (pwmINPUT > (pwmFB + PosDeadZone) || pwmINPUT < (pwmFB - PosDeadZone))   // 
	//{
	if (MotorPositionINPUT > MotorPositionFB)
	{
		MotorDirectionOUTPUT = 1;
	}
	else if (MotorPositionINPUT < MotorPositionFB)
	{
		MotorDirectionOUTPUT = -1;
	}
	else
	{
		MotorDirectionOUTPUT = 0;
		motorStop();
	}
	//}
	//else
	//{
	//  MotorDirectionOUTPUT = 0;
	//}
}

void calInputPWM()
{
	int RpmINPUT = LinearSpeedINPUT / (shaft_d*0.10472 * 1000);
	//Serial.println(RpmINPUT);
	pwmINPUT = map(RpmINPUT, 0, 60, 0, 255);
	PrepwmINPUT = pwmINPUT;
}


/***********************************************
			ENCODER PROCESSING
Channel A Signal	->	MotorDirectionFB
Channel B Signal	->	pwmFB
************************************************/
void encoderFeedbackInput()						// read encoder inputs
{
	channel_A = digitalRead(pin_A);
	channel_B = digitalRead(pin_B);
}

void encoderFeedbackPosition()
{
	int cnt = 0;
	encoder_A_prev = channel_A;
	while (channel_A == encoder_A_prev)
	{
		channel_A = digitalRead(pin_A);
	}
	if (channel_A)
	{
		cnt++;
		MotorPositionFB = cnt * 0.6;
	}
}

void encoderFeedbackComputation()
{
	int startTime = millis();					//get elapsed time
	int cmp = 0;
	while (cmp < encoderResolution)
	{
		encoder_A_prev = channel_A;
		while (channel_A == encoder_A_prev)
		{
			channel_A = digitalRead(pin_A);
		}
		if (channel_A)
		{
			cmp++;
		}
		else if (encoder_A_prev)
		{
			if (channel_B)
			{
				/*CLOCKWISE*/
				Serial.println("FB:CLOCKWISE");
				MotorDirectionFB = 1;
			}
			else
			{
				/*COUNTER-CLOCKWISE*/
				Serial.println("FB:COUNTER-CLOCKWISE");
				MotorDirectionFB = -1;
			}
		}
	}


	//int TimeForOneRevolution = millis() - startTime;			// get elapsed time - ms
	//RotatingSpeedFB = 60000 / TimeForOneRevolution;				// 1min=60000ms
	//LinearSpeedFB = RotatingSpeedFB * shaft_d * 0.10472;
	//DisplacementFB = RotatingSpeedFB * TimeForOneRevolution;

}

/***********************************************
		PID & DIRECTION PROCESSING
MotorDirectionINPUT	
pwmINPUT			->	MotorDirectionOUTPUT
MotorDirectionFB	->	pwmOUTPUT		
pwmFB				
************************************************
Two PID implementation methods:
1.use PID_v1, create PID instance
2.create PID function manually
************************************************/
//PID MotorFeedbackPID(&input, &output, &setpoint, Kp, Ki, Kd, DIRECT);

int motorControlPID(int refINPUT, int currentINPUT)				// create PID system
{
	float error = (float)refINPUT - (float)currentINPUT;
	float pTerm = Kp * error;
	integrated_error += error;
	float iTerm = Ki * integrated_error;
	float dTerm = Kd * (error - last_error);
	last_error = error;
	return constrain(K + (pTerm + iTerm + dTerm), -255, 255);
}

/***********************************************
					ACTUATION
MotorDirectionOUTPUT	->	MotorControl_R,MotorControl_L 
pwmOUTPUT				->	MotorControl_pwm
************************************************/

void motorStop()								// break
{
	analogWrite(MotorControl_pwm, 0);
	digitalWrite(MotorControl_R, LOW);
	digitalWrite(MotorControl_L, LOW);
}

void setDirection()								// 0:BREAK 1:CLOCKWISE -1:COUNTER-CLOCKWISE
{
	if (MotorDirectionOUTPUT != PreMotorDirection)
	{
		if (MotorDirectionOUTPUT > 0)
		{
			digitalWrite(MotorControl_R, HIGH);
			digitalWrite(MotorControl_L, LOW);
		}
		else if (MotorDirectionOUTPUT < 0)
		{
			digitalWrite(MotorControl_R, LOW);
			digitalWrite(MotorControl_L, HIGH);
		}
		else
		{
			motorStop();
		}
	}
	PreMotorDirection = MotorDirectionOUTPUT;
}

void setPWM()
{
	if (pwmOUTPUT > pwmmaximum) 
	{ 
		pwmOUTPUT = pwmmaximum;
	}
	if (MotorDirectionOUTPUT)
	{
		analogWrite(MotorControl_pwm, pwmOUTPUT);
	}
	else
	{
		analogWrite(MotorControl_pwm, 0);
	}
}

/***********************************************
				EXPERIENCING MODES
1.Viberation Mode
2.Breaking Mode
3.
************************************************/
void viberationMode()							
{

}

void loop() {
	while (1)
	{
		encoderFeedbackInput();
		encoderFeedbackComputation();				// direction, speed, displacement computation

		calDirection();
		calInputPWM();
		Serial.println();
		setDirection();
		setPWM();
	}
}
